// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id          String     @id @default(cuid()) 
  content     String     @db.Text
  authorId    String      
  author      User       @relation(fields: [authorId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?   @updatedAt
  reactions   Reaction[]
  media       String?
  postType    PostType   @default(POST)
  likes       Int         @default(0)
  dislikes    Int         @default(0)
  ViewCount   Int         @default(0)
  comments    Comment[]
  hashtags    PostHashtag[]
  categories  Category[]
  reports     Report[]
  

  @@index([authorId])
  @@index([id])
}

enum PostType{
  POST
  QUESTION
}

model Hashtag {
  id          String        @id @default(cuid())
  tag         String        @unique
  posts       PostHashtag[]

  @@index([id])
}


model PostHashtag {
  id          String @id @default(cuid())
  postId      String
  post        Post   @relation(fields: [postId], references: [id])
  hashtagId   String
  hashtag     Hashtag @relation(fields: [hashtagId], references: [id])

  @@index([postId])
  @@index([hashtagId])
}
model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model User {
  id              String    @id @default(cuid())
  username        String?    @unique
  profileImageUrl String?   @default("/images/default_avatar.png")     
  displayname     String?
  email           String?   @unique
  token           String?
  role            Role     @default(SHEEP)
  followings      UserFollows[]  @relation("following")
  followers       UserFollows[]  @relation("follower")
  posts           Post[]
  reports         Report[]
  premiumStatus   Boolean   @default(false)
  reactions       Reaction[]
  comments        Comment[]
  notifications   Notification[]
  @@index([id])
}

enum Role {
  SHEEP
  ENGIINE
  ADMIN
}

model UserFollows {
  id          String @id @default(cuid())
  followingId String
  following   User   @relation("following", fields: [followingId], references: [id])
  followerId  String
  follower    User   @relation("follower", fields: [followerId], references: [id])

  @@index([followerId])
  @@index([followingId])
}


model Reaction {
  id          String        @id @default(cuid())
  type      ReactionType
  userId    String
  postId    String?
  commentID String?    
  comment   Comment?     @relation(fields: [commentID], references: [id])
  user      User        @relation(fields: [userId], references: [id])
  post      Post?        @relation(fields: [postId], references: [id])
  createdAt DateTime    @default(now())

  @@index([userId])
  @@index([postId])
  @@index([commentID])
}

model Comment {
  id          String        @id @default(cuid())
  
  pinned      Boolean   @default(false)
  content     String      @db.Text
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  postId      String
  post        Post       @relation(fields: [postId], references: [id])
  media       String?
  reactions   Reaction[] 
  reports     Report[]
  likes       Int         @default(0)
  dislikes    Int         @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([authorId])
  @@index([postId])
}

model Report {
  id          String    @id @default(cuid())
  reporterId    String
  reporter      User      @relation(fields: [reporterId], references: [id])
  postId      String?
  post        Post?       @relation(fields: [postId], references: [id])
  commentId      String?
  comment        Comment?       @relation(fields: [commentId], references: [id])

  createdAt   DateTime   @default(now())

  @@index([reporterId])
  @@index([commentId])
  @@index([postId])
}

model Notification{
  id          String    @id @default(cuid())
  senderId    String
  sender      User      @relation(fields: [senderId], references: [id])
  conent     String 
}

enum ReactionType {
  LIKE
  DISLIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}


